#version 430 core
/*
* Copyright 2018 Vienna University of Technology.
* Institute of Computer Graphics and Algorithms.
* This file is part of the ECG Lab Framework and must not be redistributed.
*/

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;

out VertexData {
	vec4 color;
} vert;

uniform mat4 modelMatrix;
uniform mat4 viewProjMatrix;
uniform mat3 normalMatrix;

uniform vec3 camera_world;

uniform vec3 illumination; // x = ambient, y = diffuse, z = specular 
uniform float specularAlpha;
uniform vec3 diffuseColor;

uniform struct DirectionalLight {
	vec3 color;
	vec3 direction;
} dirLight;

uniform struct PointLight {
	vec3 color;
	vec3 position;
	vec3 attenuation;
} pointLight;

vec3 phong(vec3 n, vec3 l, vec3 v, vec3 diffuseC, float diffuseF, vec3 specularC, float specularF, float alpha, bool attenuate, vec3 attenuation) {
	float d = length(l);
	l = normalize(l);
	float att = 1.0;	
	if(attenuate) att = 1.0f / (attenuation.x + d * attenuation.y + d * d * attenuation.z);
	vec3 r = reflect(-l, n);
	return (diffuseF * diffuseC * max(0, dot(n, l)) + specularF * specularC * pow(max(0, dot(r, v)), alpha)) * att; 
}

void main() {
	vec3 normal_world = normalMatrix * normal;
	vec4 position_world = modelMatrix * vec4(position, 1);
	gl_Position = viewProjMatrix * position_world;

	vec3 n = normalize(normal_world);
	vec3 v = normalize(camera_world - position_world.xyz);
	
	vert.color = vec4(diffuseColor * illumination.x, 1); // ambient
	
	// add directional light contribution
	vert.color.rgb += phong(n, -dirLight.direction, v, dirLight.color * diffuseColor, illumination.y, dirLight.color, illumination.z, specularAlpha, false, vec3(0));
			
	// add point light contribution
	vert.color.rgb += phong(n, pointLight.position - position_world.xyz, v, pointLight.color * diffuseColor, illumination.y, pointLight.color, illumination.z, specularAlpha, true, pointLight.attenuation);
}